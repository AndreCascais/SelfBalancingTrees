Advanced Topics in Algorithms (2016/2017) - Assign 2

Assign by:
	AndrÃ© Cascais  	201103896
	Raul Ferreira	200905641

The group decided to implement some Self Balancing Structures for this assign due to them being an upgrade over the ones we had implemented.
The language of choice was C++ due to its low level and overall fast execution times.
We looked firstly at both AVL and Red-black Trees and then expanded our work to Splay Trees aswel.

The AVL was not so hard to implement, being somehow simmilar to the data structures such as binary trees due to us making sure that all of the pointers to fathers/sons were set correctly. There were however a few tough cases but after using both https://www.ics.uci.edu/~pattis/ICS-46/lectures/notes/avl.txt for guidance and https://www.cs.usfca.edu/~galles/visualization/AVLtree.html for debuging/visualization, the job was made much easier.
This structure has a complexity of O(log(n)) for both insertion, removal and lookup and the height of it isnt bigger than ~ 1.44 log(n) for n > 3, as we were able to show exprimentally.
This structure is most useful when we have to guarantee low cost in all of the operations and it grants us the lowest bound for the tree height.

The Red-Black trees were the hardes of the structures to implement. Its picky cases failures along with a harder to fully understand algorithm made debug process a nightmare since the failures were usually simple cases but could only be found in large examples generated by us.
This structure has the same complexity for all of the operations when compared to the AVLTrees,  it is overall a bit faster but it can't guarantee such a lower bound for the height of the tree. This new bound is 2 log(n).
Red-Black trees are highly used in the industry.

The Splay Trees were the easiest to implement of all of these structures, after already having the generic code prototype for the trees as well as implementations of rotations, insertions, lookups, etc.
This structure can have bad complexities for single instructions but its ammortized costs are in the same complexity of the previous structures.
This structure is most useful due to its relatively easy implementation ans especially when we expect to have to lookup for the same element several imes in a near future.

