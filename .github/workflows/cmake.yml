name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: OS ${{ matrix.os }} | Compiler ${{ matrix.compiler-name }} | Version ${{ matrix.compiler-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-15, ubuntu-24.04 ]
        compiler-version: [ '' ]
        compiler-name: [ '' ]
        cc: [ '' ]
        cxx: [ '' ]
        include:
          # MacOS CLANG
          - os: macos-15
            compiler-name: llvm
            compiler-version: 16
            cc: /usr/local/opt/llvm@16/bin/clang-16
            cxx: /usr/local/opt/llvm@16/bin/clang++
          - os: macos-15
            compiler-name: llvm
            compiler-version: 17
            cc: /usr/local/opt/llvm@17/bin/clang-17
            cxx: /usr/local/opt/llvm@17/bin/clang++
          - os: macos-15
            compiler-name: llvm
            compiler-version: 18
            cc: /usr/local/opt/llvm@18/bin/clang-18
            cxx: /usr/local/opt/llvm@18/bin/clang++
          - os: macos-15
            compiler-name: llvm
            compiler-version: 19
            cc: /usr/local/opt/llvm@19/bin/clang-19
            cxx: /usr/local/opt/llvm@19/bin/clang++

          # MacOS GCC
          - os: macos-15
            compiler-name: gcc
            compiler-version: 11
            cc: gcc-11
            cxx: g++-11
          - os: macos-15
            compiler-name: gcc
            compiler-version: 12
            cc: gcc-12
            cxx: g++-12
          - os: macos-15
            compiler-name: gcc
            compiler-version: 13
            cc: gcc-13
            cxx: g++-13
          - os: macos-15
            compiler-name: gcc
            compiler-version: 14
            cc: gcc-14
            cxx: g++-14

          # Ubuntu CLANG
          - os: ubuntu-24.04
            compiler-name: llvm
            compiler-version: 16
            cc: clang-16
            cxx: clang++-16
          - os: ubuntu-24.04
            compiler-name: llvm
            compiler-version: 17
            cc: clang-17
            cxx: clang++-17
          - os: ubuntu-24.04
            compiler-name: llvm
            compiler-version: 18
            cc: clang-18
            cxx: clang++-18
          - os: ubuntu-24.04
            compiler-name: llvm
            compiler-version: 19
            cc: clang-19
            cxx: clang++-19

          # Ubuntu GCC
          - os: ubuntu-24.04
            compiler-name: gcc
            compiler-version: 11
            cc: gcc-11
            cxx: g++-11
          - os: ubuntu-24.04
            compiler-name: gcc
            compiler-version: 12
            cc: gcc-12
            cxx: g++-12
          - os: ubuntu-24.04
            compiler-name: gcc
            compiler-version: 13
            cc: gcc-13
            cxx: g++-13
          - os: ubuntu-24.04
            compiler-name: gcc
            compiler-version: 14
            cc: gcc-14
            cxx: g++-14

        # Exclude the "base cases"
        exclude:
          - os: macos-15
            compiler-version: ''
            compiler-name: ''
            cc: ''
            cxx: ''
          - os: ubuntu-24.04
            compiler-version: ''
            compiler-name: ''
            cc: ''
            cxx: ''

    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install LLVM on MacOS
        if: ${{ matrix.os == 'macos-15' && matrix.compiler-name == 'llvm' }}
        run: brew install llvm@${{ matrix.compiler-version }}

      - name: Install GCC on MacOS
        if: ${{ matrix.os == 'macos-15' && matrix.compiler-name == 'gcc' }}
        run: brew install gcc@${{ matrix.compiler-version }}

      - name: Install LLVM on Ubuntu
        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.compiler-name == 'llvm' }}
        run: sudo apt-get install -y clang-${{ matrix.compiler-version }} libomp-${{ matrix.compiler-version }}-dev

      - name: Install GCC on Ubuntu
        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.compiler-name == 'gcc' }}
        run: sudo apt-get install -y g++-${{ matrix.compiler-version }}

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{ matrix.extra-cmake-arguments }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Prepare Inputs
        run: |
          pushd Inputs
          ./input_generator.sh 1000 999 0 0
          ./input_generator.sh 10000 9999 0 0
          ./input_generator.sh 100000 99999 0 0
          ./input_generator.sh 1000000 999999 0 0
          ./input_generator.sh 10000000 9999999 0 0
          ./input_generator.sh 1000 0 1000 0
          ./input_generator.sh 10000 0 10000 0
          ./input_generator.sh 100000 0 100000 0
          ./input_generator.sh 1000000 0 1000000 0
          ./input_generator.sh 10000000 0 10000000 0
          popd

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} -V
